{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Docs At first I had this project privately to myself where I could copy-and-paste already sorted out configurations to other projects, I think everyone has one of those. Now it\u2019s public and others can take advantage of it. Docs were written for coders in a rush, but I\u2019ll try to balance the amount of information not to be too vague. I just want you to copy-and-paste something that actually works without too much reading. References to full documentation are always included for deep dive later on with time.","title":"Home"},{"location":"#docs","text":"At first I had this project privately to myself where I could copy-and-paste already sorted out configurations to other projects, I think everyone has one of those. Now it\u2019s public and others can take advantage of it. Docs were written for coders in a rush, but I\u2019ll try to balance the amount of information not to be too vague. I just want you to copy-and-paste something that actually works without too much reading. References to full documentation are always included for deep dive later on with time.","title":"Docs"},{"location":"analytics/","text":"","title":"Analytics"},{"location":"badges/","text":"Badges / Shields All-in-one at Shields.io Build Coverage Analysis Chat Dependencies Size Downloads Funding Issue Tracking License Rating Social Version Platform & Version Support Monitoring Activity Other","title":"Badges"},{"location":"badges/#badges-shields","text":"","title":"Badges / Shields"},{"location":"badges/#all-in-one-at-shieldsio","text":"Build Coverage Analysis Chat Dependencies Size Downloads Funding Issue Tracking License Rating Social Version Platform & Version Support Monitoring Activity Other","title":"All-in-one at Shields.io"},{"location":"code_quality/","text":"","title":"Code quality"},{"location":"coverage/","text":"Coverage Coverage is a framework which runs your tests, keeping track of every linearly independent paths through your code and marking which path is or isn\u2019t touched by a test. You know your code is 100% tested when every statement, branch (of ifs and switches), functions and line is contemplated. Istanbul Istanbul is the instrumentation tool, nyc is its command line client. Simply precede your test command line with nyc and at the end of all tests you\u2019ll get a report line this: If you wish to generate a neat HTML to visualize your code marked with coverage information, precede your test command with nyc --reporter=html Codecov and Coveralls Codecov and Coveralls are, might I say, identical services. They display a report very much like the one you get from nyc --reporter=html . Both read the LCOV format thus requiring you to run nyc report --reporter=text-lcov and if you ask stackshare, both have very similar popularity .","title":"Code Coverage"},{"location":"coverage/#coverage","text":"Coverage is a framework which runs your tests, keeping track of every linearly independent paths through your code and marking which path is or isn\u2019t touched by a test. You know your code is 100% tested when every statement, branch (of ifs and switches), functions and line is contemplated.","title":"Coverage"},{"location":"coverage/#istanbul","text":"Istanbul is the instrumentation tool, nyc is its command line client. Simply precede your test command line with nyc and at the end of all tests you\u2019ll get a report line this: If you wish to generate a neat HTML to visualize your code marked with coverage information, precede your test command with nyc --reporter=html","title":"Istanbul"},{"location":"coverage/#codecov-and-coveralls","text":"Codecov and Coveralls are, might I say, identical services. They display a report very much like the one you get from nyc --reporter=html . Both read the LCOV format thus requiring you to run nyc report --reporter=text-lcov and if you ask stackshare, both have very similar popularity .","title":"Codecov and Coveralls"},{"location":"extensions/","text":"Markdown Extensions Table of Contents toc Markdown Extensions Table of Contents Alternative Label CodeHilite SmartyPants Footnotes Attribute Lists Definition Lists Abbreviations New-Line-to-Break Extension Admonition The above index was automatically generated with the marker [TOC] CodeHilite codehilite function recurse ( startingPlace , otherFunc , callback_one ) { // code you may have ... if ( your_terminating_criterion === true ) { return callback_one ( val ); // where val is potentially some value you want to return (or a json object with results) } // more code you may have } 1 2 3 4 5 6 7 function recurse ( startingPlace , otherFunc , callback_one ) { // code you may have ... if ( your_terminating_criterion === true ) { return callback_one ( val ); // where val is potentially some value you want to return (or a json object with results) } // more code you may have } For some reason I didn\u2019t get the line numbers to align correctly. I added the extra CSS according to instructions but it didn\u2019t change anything AFAIK. Turning off all other extensions and switching themes didn\u2019t work either. SmartyPants smarty \u2018single quotes\u2019, \u201cquotes\u201d, \u00ab angle quotes \u00bb, \u2026 (ellipsis) and dashes \u2013 and \u2014 are converted to their HTML entity equivalents. Footnotes footnotes Click on this 1 or this 2 footnotes and be taken to additional text at the bottom of the page. Attribute Lists attr_list Definition Lists def_list Apple Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange The fruit of an evergreen tree of the genus Citrus. Abbreviations abbr The HTML specification is maintained by the W3C . New-Line-to-Break Extension nl2br Will cause newlines to be treated as hard breaks; like StackOverflow and GitHub flavored Markdown do. Admonition admonition Attention This is an attention box Caution This is a caution box Danger This is a danger box Error This is an error box Hint This is a hint box Important This is an important box Note This is a note box Tip This is a tip box Warning This is a warning box For convenience, in the markdown file this additional block follows that first line with the footnotes. Although in the actual HTML it drops to the end. a code block A final paragraph. \u21a9 Notice the arrow at the end of this note: \u201c2\u201d. \u21a9","title":"Extensions"},{"location":"extensions/#markdown-extensions","text":"","title":"Markdown Extensions"},{"location":"extensions/#markdown","text":"toc Markdown Extensions Table of Contents Alternative Label CodeHilite SmartyPants Footnotes Attribute Lists Definition Lists Abbreviations New-Line-to-Break Extension Admonition The above index was automatically generated with the marker [TOC]","title":"Table of Contents Alternative Label"},{"location":"extensions/#codehilite","text":"codehilite function recurse ( startingPlace , otherFunc , callback_one ) { // code you may have ... if ( your_terminating_criterion === true ) { return callback_one ( val ); // where val is potentially some value you want to return (or a json object with results) } // more code you may have } 1 2 3 4 5 6 7 function recurse ( startingPlace , otherFunc , callback_one ) { // code you may have ... if ( your_terminating_criterion === true ) { return callback_one ( val ); // where val is potentially some value you want to return (or a json object with results) } // more code you may have } For some reason I didn\u2019t get the line numbers to align correctly. I added the extra CSS according to instructions but it didn\u2019t change anything AFAIK. Turning off all other extensions and switching themes didn\u2019t work either.","title":"CodeHilite"},{"location":"extensions/#smartypants","text":"smarty \u2018single quotes\u2019, \u201cquotes\u201d, \u00ab angle quotes \u00bb, \u2026 (ellipsis) and dashes \u2013 and \u2014 are converted to their HTML entity equivalents.","title":"SmartyPants"},{"location":"extensions/#footnotes","text":"footnotes Click on this 1 or this 2 footnotes and be taken to additional text at the bottom of the page.","title":"Footnotes"},{"location":"extensions/#attribute-lists","text":"attr_list","title":"Attribute Lists"},{"location":"extensions/#definition-lists","text":"def_list Apple Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange The fruit of an evergreen tree of the genus Citrus.","title":"Definition Lists"},{"location":"extensions/#abbreviations","text":"abbr The HTML specification is maintained by the W3C .","title":"Abbreviations"},{"location":"extensions/#new-line-to-break-extension","text":"nl2br Will cause newlines to be treated as hard breaks; like StackOverflow and GitHub flavored Markdown do.","title":"New-Line-to-Break Extension"},{"location":"extensions/#admonition","text":"admonition Attention This is an attention box Caution This is a caution box Danger This is a danger box Error This is an error box Hint This is a hint box Important This is an important box Note This is a note box Tip This is a tip box Warning This is a warning box For convenience, in the markdown file this additional block follows that first line with the footnotes. Although in the actual HTML it drops to the end. a code block A final paragraph. \u21a9 Notice the arrow at the end of this note: \u201c2\u201d. \u21a9","title":"Admonition"},{"location":"mkdocs/","text":"MkDocs","title":"MkDocs"},{"location":"mkdocs/#mkdocs","text":"","title":"MkDocs"},{"location":"mocks/","text":"Mocks Sinon Maybe your software integrates with other APIs, probably it connects to a database, and such resources won\u2019t/shouldn\u2019t be available for testing. For those situations, try sinon.js . There are lots of convenient ways to mock resources and all of those can be found in the documentation, but the one I use the most is replacing my http client request. import needle from 'needle' ; import sinon from 'sinon' ; import { FakeNeedle } from './mocks/needle/fake-needle' ; sinon . replace ( needle , 'request' , sinon . fake ( new FakeNeedle (). request )); In this example, I switched needle \u2018s request function for a fake one of mine, that will be called unbeknownst to the code. This way I can control exactly what happens during tests with HTTP calls to other APIs. export class FakeNeedle { private readonly baseRequest : unknown ; constructor () { // This is a real request object that I stringified to a JSON this . baseRequest = JSON . parse ( fs . readFileSync ( 'test/mocks/needle/request.json' ). toString ()); } // This is the method that will be used instead of the real one public request = ( method : NeedleHttpVerbs , url : string , data : BodyData , _options? : NeedleOptions , callback? : NeedleCallback ) : ReadableStream => { // It looks for a file keyed by the URL and parameters received. const fileName : string = crypto . createHash ( 'md5' ) . update ( url + JSON . stringify ( data )). digest ( 'hex' ) + '.json' ; const filePath : string = path . join ( 'test/mocks/needle' , url , fileName ); // If the file is not found, your test is broken if ( ! fs . existsSync ( filePath )) { console . debug ( 'method: ' + method ); console . debug ( 'call ' + url ); console . debug ( 'data ' + JSON . stringify ( data )); console . debug ( 'path: ' + fileName ); process . exit ( 0 ); } else { // Based on the URL and parameters, a preset response is returned const body : unknown = JSON . parse ( fs . readFileSync ( filePath ). toString ()); const request : NeedleResponse = JSON . parse ( JSON . stringify ( this . baseRequest )); request . body = body ; callback ( undefined , request , body ); } return undefined ; } } That it! Of course you can also give files a more intuitive name and choose them inside a switch statement, your call!","title":"Mocks"},{"location":"mocks/#mocks","text":"","title":"Mocks"},{"location":"mocks/#sinon","text":"Maybe your software integrates with other APIs, probably it connects to a database, and such resources won\u2019t/shouldn\u2019t be available for testing. For those situations, try sinon.js . There are lots of convenient ways to mock resources and all of those can be found in the documentation, but the one I use the most is replacing my http client request. import needle from 'needle' ; import sinon from 'sinon' ; import { FakeNeedle } from './mocks/needle/fake-needle' ; sinon . replace ( needle , 'request' , sinon . fake ( new FakeNeedle (). request )); In this example, I switched needle \u2018s request function for a fake one of mine, that will be called unbeknownst to the code. This way I can control exactly what happens during tests with HTTP calls to other APIs. export class FakeNeedle { private readonly baseRequest : unknown ; constructor () { // This is a real request object that I stringified to a JSON this . baseRequest = JSON . parse ( fs . readFileSync ( 'test/mocks/needle/request.json' ). toString ()); } // This is the method that will be used instead of the real one public request = ( method : NeedleHttpVerbs , url : string , data : BodyData , _options? : NeedleOptions , callback? : NeedleCallback ) : ReadableStream => { // It looks for a file keyed by the URL and parameters received. const fileName : string = crypto . createHash ( 'md5' ) . update ( url + JSON . stringify ( data )). digest ( 'hex' ) + '.json' ; const filePath : string = path . join ( 'test/mocks/needle' , url , fileName ); // If the file is not found, your test is broken if ( ! fs . existsSync ( filePath )) { console . debug ( 'method: ' + method ); console . debug ( 'call ' + url ); console . debug ( 'data ' + JSON . stringify ( data )); console . debug ( 'path: ' + fileName ); process . exit ( 0 ); } else { // Based on the URL and parameters, a preset response is returned const body : unknown = JSON . parse ( fs . readFileSync ( filePath ). toString ()); const request : NeedleResponse = JSON . parse ( JSON . stringify ( this . baseRequest )); request . body = body ; callback ( undefined , request , body ); } return undefined ; } } That it! Of course you can also give files a more intuitive name and choose them inside a switch statement, your call!","title":"Sinon"},{"location":"monitoring/","text":"","title":"Monitoring"},{"location":"online_coverage/","text":"","title":"Online coverage"},{"location":"pipeline/","text":"Pipeline There are countless options for CI/CD tool, and all of them will suit all of your needs. I already work with GitLab CI/CD and Travis is quite popular so I chose to try this because I thought it faster to learn and I fancy the UI. There are three workflows: development_commit : Commits to branch develop; staging_commit : Commits to release or master branches; release : Commits of release tags. Hint Open the configuration in another window for the text bellow to make sense. Jobs stamp Every workflow stars with a stamp. Package.json version tag contains a \u201c-dev\u201d string that\u2019ll get replaced by the unique number of the spawned build, put there for tracking purposes. It\u2019ll also print the NPM Token to then .npmrc file, for unattended authentication. dependencies and dev_dependencies Development and production dependencies are cached separately and indexed by a checksum of package.json. It means it\u2019ll download and install them only once per package.json revision, when the checksum changes. That\u2019s why I wrote a script that calls npm install only when node_modules don\u2019t already exist. And to keep package.json from changing and messing with the checksum function, I had to use the --no-save flag docs MkDocs documentation are freely and easily deployed to ReadTheDocs through webhooks, and that should be a default approach. However, if your project isn\u2019t open source and you need the documentation deployed as a website, I wrote this job to generate the final HTML and push it back to the repository as an automated push. In this case, the folder is being watched and published by GitHub, but it might as well be an htdocs or wwwroot folder in a server elsewhere where files should go through SCP, or an AWS S3 hosted website pushed through AWS CLI. Unattended authentication will be implemented with SSH Keys. Open a term like Git Bash and run \u2018 ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" \u2019. The e-mail is important, the password should NOT be set. You know you did it right if the private key starts with \u201c -----BEGIN RSA PRIVATE KEY----- \u201c Private key is kept with CircleCI, public key goes to the remote server. To set up the public key: In GitHub, it\u2019s the path to the repository plus /settings/keys at the end; in GitLab, it\u2019s /settings/repository ; In Bitbucket, it\u2019s /admin/access-keys/ ; In a linux server, just add the public key as a new line to ~/.ssh/authorized_keys . To set up the private key in CircleCI repository (not dashboard, repository!), add /edit#ssh to the URL and click Add SSH Key. Hostname must match. E.g.: github.com . Copy the fingerprint. Now in the config.yml, see the fingerprint just before the Push new version command? That\u2019s what makes it. Don\u2019t forget to shred the files. They are meant to be use in these steps but not saved. The script .circleci/push_docs_site.sh is there to guarantee that only new versions of the site are going to be pushed. That\u2019s because sitemap.xml.gz is always generated regardless whether or not there were modifications, so it\u2019ll be left out of the decision. audit_dependencies It\u2019s not enough to make sure your code is tight, the code of the dependencies you use must be verified too. NPM audit is quite enough, but just to be safe I also check with Snyk , which connects to other vulnerability databases, such as CVEs from NVD and many others code_review If you are just starting to code, maybe you have a personal all yours way of organizing your thoughts that almost serves as a signature. It\u2019s no much of a problem if you\u2019re the only one who maintains it, but even in a small team people need to feel conformable giving maintenance to the code of others. That\u2019s why we need a conventional code style. The more consistent you code is, the cleaner will be your commits, and the faster other people will be able to understand it. TSLint is the default linter for TypeScript, and it\u2019s main objective is to enforce the code style. The most popular set of rules are tslint-config-airbnb , tslint-eslint-rules and tslint-config-prettier . Choose one of them, or make yourself another based on one of them. Just do it. This job is saving the result as a report in JUnit format because if it fails, you can see the occurrences in CircleCI UI. build Build is build, no further explanation required. Only this job has a different set of compiler options for production code and development code. test Here in this task, I run nyc with mocha reporting with mocha-junit-reporter because that\u2019s the format CircleCI will understand; Then I report in json , which generates a coverage/coverage-final.json file, and submit it to Codecov ; Then I report in text-lcov and pipe the output to Coveralls ; I also report again in text-lcov , this time saving the output to coverage/lcov.info , in a batch to Code Climate . Finally, I restore SonarQube Scanner from cache and run it with parameter options (instead of a .properties file in the project). It\u2019s a java program, but it has an embedded runtime environment so you don\u2019t need to worry about a Java docker image. The analysis can be seen in Sonarcloud . At the end I save SonarQube Scanner top the cache, for there may have been updates to its dependencies, and store test results saved in the reports folder. deploy_dev TypeScript/JavaScript packages are published to NPM. Releases are carefully controlled, but development code might be written in different packages and thus committing code must make it readily available under the tag @dev . cache_release Releases cannot be available without a matching tag, so in a release or master branch, code is cached before it\u2019s deployed. When the master parameter is true, the version is taken from package.json. When release_branch is true, the version is taken from the branch. In either case, a .circleci/.release is created and it\u2019s checksum used to index de release in the cache. check_release Version is retrieved from package.json or branch name and saved to workspace for further deployment. deploy_release Workspace is retrieved and published with an @alpha, @beta, @next (release candidate), or @latest (stable/default) tag according with the job\u2019s parameters. Note A branch is deemed a release branch if it\u2019s a valid SemVer tag preceded with \u201crelease/v\u201d . Release tags are the same, except there will be no release/ preceding it. A commit to the master branch is always considered a stable version and must always be followed by a matching tag for publishing. Workflows development_commit Dependencies are retrieved, build number is stamped to the version, docs are generated an pushed, code is reviewed, dependencies are audited for security vulnerabilities, javascript is built and the whole system is tested. At the end, a new package is published under the tag @dev . staging_commit The same as a development one, except that failing to push the docs fails the whole workflow, and the packaged is cached instead of published. release Upon creating a tag matching a previously run staging_commit , the package is published accordingly. If it\u2019s a stable release, a manual approval is necessary. random_commit For any other commit unrelated to the development, release or master flow (maybe a hotfix, or a merged PR), the random_commit will kick in only to guarantee the reviews, audits and tests.","title":"Pipeline"},{"location":"pipeline/#pipeline","text":"There are countless options for CI/CD tool, and all of them will suit all of your needs. I already work with GitLab CI/CD and Travis is quite popular so I chose to try this because I thought it faster to learn and I fancy the UI. There are three workflows: development_commit : Commits to branch develop; staging_commit : Commits to release or master branches; release : Commits of release tags. Hint Open the configuration in another window for the text bellow to make sense.","title":"Pipeline"},{"location":"pipeline/#jobs","text":"","title":"Jobs"},{"location":"pipeline/#stamp","text":"Every workflow stars with a stamp. Package.json version tag contains a \u201c-dev\u201d string that\u2019ll get replaced by the unique number of the spawned build, put there for tracking purposes. It\u2019ll also print the NPM Token to then .npmrc file, for unattended authentication.","title":"stamp"},{"location":"pipeline/#dependencies-and-dev_dependencies","text":"Development and production dependencies are cached separately and indexed by a checksum of package.json. It means it\u2019ll download and install them only once per package.json revision, when the checksum changes. That\u2019s why I wrote a script that calls npm install only when node_modules don\u2019t already exist. And to keep package.json from changing and messing with the checksum function, I had to use the --no-save flag","title":"dependencies and dev_dependencies"},{"location":"pipeline/#docs","text":"MkDocs documentation are freely and easily deployed to ReadTheDocs through webhooks, and that should be a default approach. However, if your project isn\u2019t open source and you need the documentation deployed as a website, I wrote this job to generate the final HTML and push it back to the repository as an automated push. In this case, the folder is being watched and published by GitHub, but it might as well be an htdocs or wwwroot folder in a server elsewhere where files should go through SCP, or an AWS S3 hosted website pushed through AWS CLI. Unattended authentication will be implemented with SSH Keys. Open a term like Git Bash and run \u2018 ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" \u2019. The e-mail is important, the password should NOT be set. You know you did it right if the private key starts with \u201c -----BEGIN RSA PRIVATE KEY----- \u201c Private key is kept with CircleCI, public key goes to the remote server. To set up the public key: In GitHub, it\u2019s the path to the repository plus /settings/keys at the end; in GitLab, it\u2019s /settings/repository ; In Bitbucket, it\u2019s /admin/access-keys/ ; In a linux server, just add the public key as a new line to ~/.ssh/authorized_keys . To set up the private key in CircleCI repository (not dashboard, repository!), add /edit#ssh to the URL and click Add SSH Key. Hostname must match. E.g.: github.com . Copy the fingerprint. Now in the config.yml, see the fingerprint just before the Push new version command? That\u2019s what makes it. Don\u2019t forget to shred the files. They are meant to be use in these steps but not saved. The script .circleci/push_docs_site.sh is there to guarantee that only new versions of the site are going to be pushed. That\u2019s because sitemap.xml.gz is always generated regardless whether or not there were modifications, so it\u2019ll be left out of the decision.","title":"docs"},{"location":"pipeline/#audit_dependencies","text":"It\u2019s not enough to make sure your code is tight, the code of the dependencies you use must be verified too. NPM audit is quite enough, but just to be safe I also check with Snyk , which connects to other vulnerability databases, such as CVEs from NVD and many others","title":"audit_dependencies"},{"location":"pipeline/#code_review","text":"If you are just starting to code, maybe you have a personal all yours way of organizing your thoughts that almost serves as a signature. It\u2019s no much of a problem if you\u2019re the only one who maintains it, but even in a small team people need to feel conformable giving maintenance to the code of others. That\u2019s why we need a conventional code style. The more consistent you code is, the cleaner will be your commits, and the faster other people will be able to understand it. TSLint is the default linter for TypeScript, and it\u2019s main objective is to enforce the code style. The most popular set of rules are tslint-config-airbnb , tslint-eslint-rules and tslint-config-prettier . Choose one of them, or make yourself another based on one of them. Just do it. This job is saving the result as a report in JUnit format because if it fails, you can see the occurrences in CircleCI UI.","title":"code_review"},{"location":"pipeline/#build","text":"Build is build, no further explanation required. Only this job has a different set of compiler options for production code and development code.","title":"build"},{"location":"pipeline/#test","text":"Here in this task, I run nyc with mocha reporting with mocha-junit-reporter because that\u2019s the format CircleCI will understand; Then I report in json , which generates a coverage/coverage-final.json file, and submit it to Codecov ; Then I report in text-lcov and pipe the output to Coveralls ; I also report again in text-lcov , this time saving the output to coverage/lcov.info , in a batch to Code Climate . Finally, I restore SonarQube Scanner from cache and run it with parameter options (instead of a .properties file in the project). It\u2019s a java program, but it has an embedded runtime environment so you don\u2019t need to worry about a Java docker image. The analysis can be seen in Sonarcloud . At the end I save SonarQube Scanner top the cache, for there may have been updates to its dependencies, and store test results saved in the reports folder.","title":"test"},{"location":"pipeline/#deploy_dev","text":"TypeScript/JavaScript packages are published to NPM. Releases are carefully controlled, but development code might be written in different packages and thus committing code must make it readily available under the tag @dev .","title":"deploy_dev"},{"location":"pipeline/#cache_release","text":"Releases cannot be available without a matching tag, so in a release or master branch, code is cached before it\u2019s deployed. When the master parameter is true, the version is taken from package.json. When release_branch is true, the version is taken from the branch. In either case, a .circleci/.release is created and it\u2019s checksum used to index de release in the cache.","title":"cache_release"},{"location":"pipeline/#check_release","text":"Version is retrieved from package.json or branch name and saved to workspace for further deployment.","title":"check_release"},{"location":"pipeline/#deploy_release","text":"Workspace is retrieved and published with an @alpha, @beta, @next (release candidate), or @latest (stable/default) tag according with the job\u2019s parameters. Note A branch is deemed a release branch if it\u2019s a valid SemVer tag preceded with \u201crelease/v\u201d . Release tags are the same, except there will be no release/ preceding it. A commit to the master branch is always considered a stable version and must always be followed by a matching tag for publishing.","title":"deploy_release"},{"location":"pipeline/#workflows","text":"","title":"Workflows"},{"location":"pipeline/#development_commit","text":"Dependencies are retrieved, build number is stamped to the version, docs are generated an pushed, code is reviewed, dependencies are audited for security vulnerabilities, javascript is built and the whole system is tested. At the end, a new package is published under the tag @dev .","title":"development_commit"},{"location":"pipeline/#staging_commit","text":"The same as a development one, except that failing to push the docs fails the whole workflow, and the packaged is cached instead of published.","title":"staging_commit"},{"location":"pipeline/#release","text":"Upon creating a tag matching a previously run staging_commit , the package is published accordingly. If it\u2019s a stable release, a manual approval is necessary.","title":"release"},{"location":"pipeline/#random_commit","text":"For any other commit unrelated to the development, release or master flow (maybe a hotfix, or a merged PR), the random_commit will kick in only to guarantee the reviews, audits and tests.","title":"random_commit"},{"location":"rtd/","text":"ReadTheDocs","title":"ReadTheDocs"},{"location":"rtd/#readthedocs","text":"","title":"ReadTheDocs"},{"location":"security/","text":"Vulnerability Scan For 99,999% of cases, npm audit is more than enough. It\u2019s a result or the acquisition of ^Lift Security and Node Security Platform by NPM , and has it\u2019s own database, more specific and relevant for JavaScript. But maybe your project must be certifiable by an specific standard which enforces a strict set of databases which vulnerabilities are to be tested against. Odds are NVD is included. It\u2019s the NIST (National Institute of Standards and Technology)\u2019s N ational V ulnerability D atabase, sponsored by the National Cyber Security Division of the U.S. Department of Homeland Security. And if you need a tool which connects with NVD while maintaining its own database and is also quite popular , you should try Snyk .","title":"Security"},{"location":"security/#vulnerability-scan","text":"For 99,999% of cases, npm audit is more than enough. It\u2019s a result or the acquisition of ^Lift Security and Node Security Platform by NPM , and has it\u2019s own database, more specific and relevant for JavaScript. But maybe your project must be certifiable by an specific standard which enforces a strict set of databases which vulnerabilities are to be tested against. Odds are NVD is included. It\u2019s the NIST (National Institute of Standards and Technology)\u2019s N ational V ulnerability D atabase, sponsored by the National Cyber Security Division of the U.S. Department of Homeland Security. And if you need a tool which connects with NVD while maintaining its own database and is also quite popular , you should try Snyk .","title":"Vulnerability Scan"},{"location":"tests/","text":"Tests Tests are a complex if not polemic topic. TDD or not TDD, not every automated test is an unit test, not every unit test needs to be automated. But frameworks have to be deployed to guarantee regression tests, which is how you know that the feature of fix being introduced now won\u2019t break anything that was working perfectly before. Mocha This project uses Mocha for that, only because it\u2019s the one I learned first and always used in the past. I sincerely can\u2019t say anything about the others but I\u2019ll sure give Jest a try. It has increased its popularity this year and I ought to know why. TS-Node Mocha is a JavaScript testing framework, and the code to test is written in TypeScript. To make this work, we use ts-node, a TypeScript execution and REPL for node.js. In short, it transpiles the code on-the-fly, no need to build-ts or watch-ts. All you have to do is to add --require ts-node/register as a command line parameter. Chai To make the tests semantically pleasant, we use Chai. it\u2019s an assertion library and has the sole function of turning this: assert . equal ( res . status , 200 ); into this: res . status . should . be . equal ( 200 ); // or... expect ( res . status ). to . be . equal ( 200 ); It may look foolish, but after a couple hundred tests, semantically pleasant code makes a difference.","title":"Tests"},{"location":"tests/#tests","text":"Tests are a complex if not polemic topic. TDD or not TDD, not every automated test is an unit test, not every unit test needs to be automated. But frameworks have to be deployed to guarantee regression tests, which is how you know that the feature of fix being introduced now won\u2019t break anything that was working perfectly before.","title":"Tests"},{"location":"tests/#mocha","text":"This project uses Mocha for that, only because it\u2019s the one I learned first and always used in the past. I sincerely can\u2019t say anything about the others but I\u2019ll sure give Jest a try. It has increased its popularity this year and I ought to know why.","title":"Mocha"},{"location":"tests/#ts-node","text":"Mocha is a JavaScript testing framework, and the code to test is written in TypeScript. To make this work, we use ts-node, a TypeScript execution and REPL for node.js. In short, it transpiles the code on-the-fly, no need to build-ts or watch-ts. All you have to do is to add --require ts-node/register as a command line parameter.","title":"TS-Node"},{"location":"tests/#chai","text":"To make the tests semantically pleasant, we use Chai. it\u2019s an assertion library and has the sole function of turning this: assert . equal ( res . status , 200 ); into this: res . status . should . be . equal ( 200 ); // or... expect ( res . status ). to . be . equal ( 200 ); It may look foolish, but after a couple hundred tests, semantically pleasant code makes a difference.","title":"Chai"},{"location":"uptodateness/","text":"Up-to-dateness It\u2019s so tedious to keep all dependencies updated to their last version that I doubt most projects actually are, although it should be considered as important as any other audit. If you don\u2019t want to actively keep an eye on your David badges and manually edit your package.json for dependencies updates, a good solution is Greenkeeper . It knows your package.json and monitors the NPM feed. Whenever a new stable version of a dependency you project uses is released, it runs your CI tests against it, opens an issue if your CI tests fails, or opens a PR if the new version is out of range for the SemVer you specified. The detailed explanation is here .","title":"Up-to-dateness"},{"location":"uptodateness/#up-to-dateness","text":"It\u2019s so tedious to keep all dependencies updated to their last version that I doubt most projects actually are, although it should be considered as important as any other audit. If you don\u2019t want to actively keep an eye on your David badges and manually edit your package.json for dependencies updates, a good solution is Greenkeeper . It knows your package.json and monitors the NPM feed. Whenever a new stable version of a dependency you project uses is released, it runs your CI tests against it, opens an issue if your CI tests fails, or opens a PR if the new version is out of range for the SemVer you specified. The detailed explanation is here .","title":"Up-to-dateness"},{"location":"vscode/","text":"Visual Code Extensions","title":"Visual Code"},{"location":"vscode/#visual-code-extensions","text":"","title":"Visual Code Extensions"}]}